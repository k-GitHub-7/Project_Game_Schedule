{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-projects\\\\Github\\\\Project_Game_Schedule\\\\src\\\\components\\\\TabManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Tables from './Tables'; // Tab manager is actually managing the tab data which needs to be rendered\n// tab is refreshed once you click again.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TabManager(props) {\n  _s();\n\n  const [campaignJson, setJson] = useState(props.data);\n\n  function updateData(d, item) {\n    const campaignData = campaignJson.map(data => {\n      if (data['name'] === item['name']) {\n        return { ...data,\n          createdOn: d\n        };\n      }\n\n      return data;\n    });\n    setJson(campaignData);\n  }\n\n  let d = new Date(); // today date updated\n\n  let milsec = d.getTime();\n  let upData = campaignJson.map(item => {\n    if (parseInt(item['createdOn']) - milsec > 86400000) {\n      return item;\n    }\n\n    return null;\n  }).filter(Boolean);\n  let liveData = campaignJson.map(item => {\n    if (parseInt(item['createdOn']) - milsec >= 0 && parseInt(item['createdOn']) - milsec <= 86400000) {\n      return item;\n    }\n\n    return null;\n  }).filter(Boolean);\n  let pastData = campaignJson.map(item => {\n    if (parseInt(item['createdOn']) < milsec) {\n      return item;\n    }\n\n    return null;\n  }).filter(Boolean);\n  const whichData = props.activeState === 'upcoming' ? upData : props.activeState === 'live' ? liveData : props.activeState === 'past' ? pastData : null;\n  return /*#__PURE__*/_jsxDEV(Tables, {\n    data: whichData,\n    updatedData: updateData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TabManager, \"rHjP6nJGMowoYnXZAC35Yq1m74g=\");\n\n_c = TabManager;\nexport default TabManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"TabManager\");","map":{"version":3,"sources":["E:/React-projects/Github/Project_Game_Schedule/src/components/TabManager.js"],"names":["React","useState","Tables","TabManager","props","campaignJson","setJson","data","updateData","d","item","campaignData","map","createdOn","Date","milsec","getTime","upData","parseInt","filter","Boolean","liveData","pastData","whichData","activeState"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAEA;AACA;;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAM,CAACC,YAAD,EAAeC,OAAf,IAA0BL,QAAQ,CAACG,KAAK,CAACG,IAAP,CAAxC;;AAEA,WAASC,UAAT,CAAoBC,CAApB,EAAuBC,IAAvB,EAA6B;AAC3B,UAAMC,YAAY,GAAGN,YAAY,CAACO,GAAb,CAAiBL,IAAI,IAAI;AAC5C,UAAIA,IAAI,CAAC,MAAD,CAAJ,KAAiBG,IAAI,CAAC,MAAD,CAAzB,EAAmC;AACjC,eAAO,EAAE,GAAGH,IAAL;AAAWM,UAAAA,SAAS,EAAEJ;AAAtB,SAAP;AACD;;AACD,aAAOF,IAAP;AACD,KALoB,CAArB;AAMAD,IAAAA,OAAO,CAACK,YAAD,CAAP;AACD;;AAED,MAAIF,CAAC,GAAG,IAAIK,IAAJ,EAAR,CAbyB,CAaL;;AACpB,MAAIC,MAAM,GAAGN,CAAC,CAACO,OAAF,EAAb;AACA,MAAIC,MAAM,GAAGZ,YAAY,CACtBO,GADU,CACNF,IAAI,IAAI;AACX,QAAIQ,QAAQ,CAACR,IAAI,CAAC,WAAD,CAAL,CAAR,GAA8BK,MAA9B,GAAuC,QAA3C,EAAqD;AACnD,aAAOL,IAAP;AACD;;AACD,WAAO,IAAP;AACD,GANU,EAOVS,MAPU,CAOHC,OAPG,CAAb;AASA,MAAIC,QAAQ,GAAGhB,YAAY,CACxBO,GADY,CACRF,IAAI,IAAI;AACX,QACEQ,QAAQ,CAACR,IAAI,CAAC,WAAD,CAAL,CAAR,GAA8BK,MAA9B,IAAwC,CAAxC,IACAG,QAAQ,CAACR,IAAI,CAAC,WAAD,CAAL,CAAR,GAA8BK,MAA9B,IAAwC,QAF1C,EAGE;AACA,aAAOL,IAAP;AACD;;AACD,WAAO,IAAP;AACD,GATY,EAUZS,MAVY,CAULC,OAVK,CAAf;AAYA,MAAIE,QAAQ,GAAGjB,YAAY,CACxBO,GADY,CACRF,IAAI,IAAI;AACX,QAAIQ,QAAQ,CAACR,IAAI,CAAC,WAAD,CAAL,CAAR,GAA8BK,MAAlC,EAA0C;AACxC,aAAOL,IAAP;AACD;;AACD,WAAO,IAAP;AACD,GANY,EAOZS,MAPY,CAOLC,OAPK,CAAf;AASA,QAAMG,SAAS,GACbnB,KAAK,CAACoB,WAAN,KAAsB,UAAtB,GACIP,MADJ,GAEIb,KAAK,CAACoB,WAAN,KAAsB,MAAtB,GACAH,QADA,GAEAjB,KAAK,CAACoB,WAAN,KAAsB,MAAtB,GACAF,QADA,GAEA,IAPN;AASA,sBAAO,QAAC,MAAD;AAAQ,IAAA,IAAI,EAAEC,SAAd;AAAyB,IAAA,WAAW,EAAEf;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAvDQL,U;;KAAAA,U;AAyDT,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport Tables from './Tables';\r\n\r\n// Tab manager is actually managing the tab data which needs to be rendered\r\n// tab is refreshed once you click again.\r\n\r\nfunction TabManager(props) {\r\n  const [campaignJson, setJson] = useState(props.data);\r\n\r\n  function updateData(d, item) {\r\n    const campaignData = campaignJson.map(data => {\r\n      if (data['name'] === item['name']) {\r\n        return { ...data, createdOn: d };\r\n      }\r\n      return data;\r\n    });\r\n    setJson(campaignData);\r\n  }\r\n\r\n  let d = new Date(); // today date updated\r\n  let milsec = d.getTime();\r\n  let upData = campaignJson\r\n    .map(item => {\r\n      if (parseInt(item['createdOn']) - milsec > 86400000) {\r\n        return item;\r\n      }\r\n      return null;\r\n    })\r\n    .filter(Boolean);\r\n\r\n  let liveData = campaignJson\r\n    .map(item => {\r\n      if (\r\n        parseInt(item['createdOn']) - milsec >= 0 &&\r\n        parseInt(item['createdOn']) - milsec <= 86400000\r\n      ) {\r\n        return item;\r\n      }\r\n      return null;\r\n    })\r\n    .filter(Boolean);\r\n\r\n  let pastData = campaignJson\r\n    .map(item => {\r\n      if (parseInt(item['createdOn']) < milsec) {\r\n        return item;\r\n      }\r\n      return null;\r\n    })\r\n    .filter(Boolean);\r\n\r\n  const whichData =\r\n    props.activeState === 'upcoming'\r\n      ? upData\r\n      : props.activeState === 'live'\r\n      ? liveData\r\n      : props.activeState === 'past'\r\n      ? pastData\r\n      : null;\r\n\r\n  return <Tables data={whichData} updatedData={updateData} />;\r\n}\r\n\r\nexport default TabManager;\r\n"]},"metadata":{},"sourceType":"module"}